{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hdcha\\\\Documents\\\\GitHub\\\\gem\\\\NDSC\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext();\nconst initialState = {\n  character: {\n    level: 1,\n    strength: 10,\n    endurance: 10,\n    agility: 10,\n    bodyType: 'beginner',\n    // beginner, intermediate, advanced, elite\n    experience: 0,\n    coins: 100\n  },\n  currentWOD: null,\n  wodHistory: [],\n  daysRemaining: 28,\n  // 4주 = 28일\n  gamePhase: 'training',\n  // training, competition\n  lastSaveTime: Date.now(),\n  totalScore: 0\n};\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case 'COMPLETE_WOD':\n      const expGain = action.payload.score * 10;\n      const coinGain = Math.floor(action.payload.score / 10);\n\n      // 능력치 증가 계산\n      const strengthGain = action.payload.wodType === 'strength' ? 3 : 1;\n      const enduranceGain = action.payload.wodType === 'cardio' ? 3 : 1;\n      const agilityGain = action.payload.wodType === 'agility' ? 3 : 1;\n      const newStrength = state.character.strength + strengthGain;\n      const newEndurance = state.character.endurance + enduranceGain;\n      const newAgility = state.character.agility + agilityGain;\n\n      // 레벨업 체크\n      const newExp = state.character.experience + expGain;\n      const newLevel = Math.floor(newExp / 1000) + 1;\n\n      // 체형 변화 체크 (새로운 능력치로 계산)\n      const totalStats = newStrength + newEndurance + newAgility;\n      let newBodyType = 'beginner';\n      if (totalStats >= 200) newBodyType = 'elite';else if (totalStats >= 150) newBodyType = 'advanced';else if (totalStats >= 100) newBodyType = 'intermediate';else newBodyType = 'beginner';\n      return {\n        ...state,\n        character: {\n          ...state.character,\n          level: newLevel,\n          experience: newExp,\n          coins: state.character.coins + coinGain,\n          strength: newStrength,\n          endurance: newEndurance,\n          agility: newAgility,\n          bodyType: newBodyType\n        },\n        wodHistory: [...state.wodHistory, {\n          ...action.payload,\n          timestamp: Date.now()\n        }],\n        totalScore: state.totalScore + action.payload.score,\n        lastSaveTime: Date.now()\n      };\n    case 'ADVANCE_DAY':\n      const newDaysRemaining = Math.max(0, state.daysRemaining - 1);\n      return {\n        ...state,\n        daysRemaining: newDaysRemaining,\n        gamePhase: newDaysRemaining <= 0 ? 'competition' : 'training'\n      };\n    case 'SET_WOD':\n      return {\n        ...state,\n        currentWOD: action.payload\n      };\n    case 'LOAD_GAME':\n      return {\n        ...state,\n        ...action.payload\n      };\n    case 'RESET_GAME':\n      return {\n        ...initialState,\n        lastSaveTime: Date.now()\n      };\n    default:\n      return state;\n  }\n}\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // 게임 저장 (localStorage 사용)\n  useEffect(() => {\n    const saveGame = () => {\n      try {\n        localStorage.setItem('crossfitGame', JSON.stringify(state));\n      } catch (error) {\n        console.error('게임 저장 실패:', error);\n      }\n    };\n    saveGame();\n  }, [state]);\n\n  // 게임 로드\n  useEffect(() => {\n    const loadGame = () => {\n      try {\n        const savedGame = localStorage.getItem('crossfitGame');\n        if (savedGame) {\n          const gameData = JSON.parse(savedGame);\n          dispatch({\n            type: 'LOAD_GAME',\n            payload: gameData\n          });\n        }\n      } catch (error) {\n        console.error('게임 로드 실패:', error);\n      }\n    };\n    loadGame();\n  }, []);\n\n  // 자동 진행 (방치형 요소)\n  useEffect(() => {\n    const autoProgress = setInterval(() => {\n      if (state.gamePhase === 'training' && state.daysRemaining > 0) {\n        // 하루에 한 번씩 자동으로 날짜 진행 (실제로는 10초마다)\n        const now = Date.now();\n        const timeDiff = now - state.lastSaveTime;\n        if (timeDiff > 10000) {\n          // 10초마다 하루 진행\n          dispatch({\n            type: 'ADVANCE_DAY'\n          });\n        }\n      }\n    }, 1000);\n    return () => clearInterval(autoProgress);\n  }, [state.gamePhase, state.daysRemaining, state.lastSaveTime]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"s3jE+e7wLGXN/2uWqdAG2uRSMfA=\");\n_c = GameProvider;\nexport const useGame = () => {\n  _s2();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame은 GameProvider 내에서 사용해야 합니다');\n  }\n  return context;\n};\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","GameContext","initialState","character","level","strength","endurance","agility","bodyType","experience","coins","currentWOD","wodHistory","daysRemaining","gamePhase","lastSaveTime","Date","now","totalScore","gameReducer","state","action","type","expGain","payload","score","coinGain","Math","floor","strengthGain","wodType","enduranceGain","agilityGain","newStrength","newEndurance","newAgility","newExp","newLevel","totalStats","newBodyType","timestamp","newDaysRemaining","max","GameProvider","children","_s","dispatch","saveGame","localStorage","setItem","JSON","stringify","error","console","loadGame","savedGame","getItem","gameData","parse","autoProgress","setInterval","timeDiff","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/hdcha/Documents/GitHub/gem/NDSC/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst GameContext = createContext();\r\n\r\nconst initialState = {\r\n  character: {\r\n    level: 1,\r\n    strength: 10,\r\n    endurance: 10,\r\n    agility: 10,\r\n    bodyType: 'beginner', // beginner, intermediate, advanced, elite\r\n    experience: 0,\r\n    coins: 100\r\n  },\r\n  currentWOD: null,\r\n  wodHistory: [],\r\n  daysRemaining: 28, // 4주 = 28일\r\n  gamePhase: 'training', // training, competition\r\n  lastSaveTime: Date.now(),\r\n  totalScore: 0\r\n};\r\n\r\nfunction gameReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'COMPLETE_WOD':\r\n      const expGain = action.payload.score * 10;\r\n      const coinGain = Math.floor(action.payload.score / 10);\r\n      \r\n      // 능력치 증가 계산\r\n      const strengthGain = action.payload.wodType === 'strength' ? 3 : 1;\r\n      const enduranceGain = action.payload.wodType === 'cardio' ? 3 : 1;\r\n      const agilityGain = action.payload.wodType === 'agility' ? 3 : 1;\r\n      \r\n      const newStrength = state.character.strength + strengthGain;\r\n      const newEndurance = state.character.endurance + enduranceGain;\r\n      const newAgility = state.character.agility + agilityGain;\r\n      \r\n      // 레벨업 체크\r\n      const newExp = state.character.experience + expGain;\r\n      const newLevel = Math.floor(newExp / 1000) + 1;\r\n      \r\n      // 체형 변화 체크 (새로운 능력치로 계산)\r\n      const totalStats = newStrength + newEndurance + newAgility;\r\n      let newBodyType = 'beginner';\r\n      \r\n      if (totalStats >= 200) newBodyType = 'elite';\r\n      else if (totalStats >= 150) newBodyType = 'advanced';\r\n      else if (totalStats >= 100) newBodyType = 'intermediate';\r\n      else newBodyType = 'beginner';\r\n      \r\n      return {\r\n        ...state,\r\n        character: {\r\n          ...state.character,\r\n          level: newLevel,\r\n          experience: newExp,\r\n          coins: state.character.coins + coinGain,\r\n          strength: newStrength,\r\n          endurance: newEndurance,\r\n          agility: newAgility,\r\n          bodyType: newBodyType\r\n        },\r\n        wodHistory: [...state.wodHistory, {\r\n          ...action.payload,\r\n          timestamp: Date.now()\r\n        }],\r\n        totalScore: state.totalScore + action.payload.score,\r\n        lastSaveTime: Date.now()\r\n      };\r\n    \r\n    case 'ADVANCE_DAY':\r\n      const newDaysRemaining = Math.max(0, state.daysRemaining - 1);\r\n      return {\r\n        ...state,\r\n        daysRemaining: newDaysRemaining,\r\n        gamePhase: newDaysRemaining <= 0 ? 'competition' : 'training'\r\n      };\r\n    \r\n    case 'SET_WOD':\r\n      return {\r\n        ...state,\r\n        currentWOD: action.payload\r\n      };\r\n    \r\n    case 'LOAD_GAME':\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    \r\n    case 'RESET_GAME':\r\n      return {\r\n        ...initialState,\r\n        lastSaveTime: Date.now()\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function GameProvider({ children }) {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  // 게임 저장 (localStorage 사용)\r\n  useEffect(() => {\r\n    const saveGame = () => {\r\n      try {\r\n        localStorage.setItem('crossfitGame', JSON.stringify(state));\r\n      } catch (error) {\r\n        console.error('게임 저장 실패:', error);\r\n      }\r\n    };\r\n    \r\n    saveGame();\r\n  }, [state]);\r\n\r\n  // 게임 로드\r\n  useEffect(() => {\r\n    const loadGame = () => {\r\n      try {\r\n        const savedGame = localStorage.getItem('crossfitGame');\r\n        if (savedGame) {\r\n          const gameData = JSON.parse(savedGame);\r\n          dispatch({ type: 'LOAD_GAME', payload: gameData });\r\n        }\r\n      } catch (error) {\r\n        console.error('게임 로드 실패:', error);\r\n      }\r\n    };\r\n    \r\n    loadGame();\r\n  }, []);\r\n\r\n  // 자동 진행 (방치형 요소)\r\n  useEffect(() => {\r\n    const autoProgress = setInterval(() => {\r\n      if (state.gamePhase === 'training' && state.daysRemaining > 0) {\r\n        // 하루에 한 번씩 자동으로 날짜 진행 (실제로는 10초마다)\r\n        const now = Date.now();\r\n        const timeDiff = now - state.lastSaveTime;\r\n        \r\n        if (timeDiff > 10000) { // 10초마다 하루 진행\r\n          dispatch({ type: 'ADVANCE_DAY' });\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(autoProgress);\r\n  }, [state.gamePhase, state.daysRemaining, state.lastSaveTime]);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useGame은 GameProvider 내에서 사용해야 합니다');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}